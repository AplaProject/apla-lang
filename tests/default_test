contract arrCNT { 
    arr.arr.arr.arr.arr.arr.arr.int a
}
==== Only Name 0okEmpty name 9
contract arrInt { 
    func a(int.int b) {
    }
}
==== Only Name 0okEmpty name 9
contract arrInt { 
    data {
        int.int b
    }
}
==== Only Name 0okEmpty name 9
contract arrInt { 
    int.int b
}
==== arrInt 2:15: Invalid type
contract callName { 
    str s = `ok`
    return @myData(Name: "Only Name") + s + @myData(Value: 17)
}
==== Only Name 0okEmpty name 9
contract callData { 
    return @myData(Name: "My Data", Value: 50)
}
==== My Data 50
contract callData { 
    return @myData(Name: "My Data", Value: "string")
}
==== callData 2:52: Unexpected type of the parameter; expecting int
contract callData { 
    return @myData(Name: "My Data", Value2: 50)
}
==== callData 2:47: Contract doesn't have Value2 parameter
contract callData { 
    return @myDIV(Name: "My Data", Value: 50)
}
==== callData 2:45: Contract myDIV doesn't have parameters
contract myData { 
    data { 
        int Value
        str Name 
    }
    str s = ` `
    if Len(Name) == 0 {
        Name = `Empty name`
        Value = 9
    }
    return Name + s + str(Value)
}
==== Empty name 9
contract myCallDIV {
    @myDIV()
}
==== integer divide by zero
contract myCall {
    return @mySLem() + @mySLem()
}
==== 123456123456
contract myCall {
    @mySLem2()
}
==== myCall 2:14: Contract mySLem2 hasn't been found
contract mySVar {
    str a
    str s = "start" + a
    s += ` `
    a = `!`
    return s + s + a
}
==== start start !
contract myLem {
    return Len(`stri\ning` + "start\nТест" + "first
second")
}
==== 36
contract mySLem {
    return `123` + "456"
}
==== 123456
contract mystr3 {
    return `stri\g т\""ест 123 + - /?`
}
==== stri\g т\""ест 123 + - /?
contract mystr2 {
    return "string \t \" \\\" 123 456"
}
==== string 	 " \" 123 456
contract mystr1 {
    return "string \t \" \\\""
}
==== string 	 " \"
contract mystr {
    return "st\king"
}
==== 2:12: invalid syntax
contract myFunc1 {
    func name(int a) int {
        int b = 10
        int c  = 3
        if a == 2 {
            return (b+c)*3
        }
        return (b + c + a)
    }
    return  name(3) + 2*name(2) 
}
==== 94
contract myparFunc {
    func name_int(int a) int {
        return a + 10
    }
    return name_int(true)
}
==== myparFunc 5:25: Function name_int(bool) hasn't been defined
contract myparFunc {
    int c
    func name_int(int a b) int {
        c+=1
        return (b-a + 1)*c
    }
    return name_int(3,4) + name_int(1,4)
}
==== 10
contract myEmpaFunc {
    func name() int {
        return true
    }
}
==== myEmpaFunc 3:21: Function must return int
contract myEmpaFunc {
    func name() int {
        return 
    }
}
==== myEmpaFunc 3:17: Function must return a value
contract myEmpaFunc {
    int a
    func name() {
        return a
    }
}
==== myEmpaFunc 4:18: Function cannot return a value
contract myEmpFunc {
    int a
    func name() {
        a += 3
        return
    }
    name()
    return a 
}
==== 3
contract myAFunc {
    int a
    func name() int {
        a += 1
    }
}
==== myAFunc 5:5: Function must return a value
contract myAFunc {
    int a
    func name() int {
        a += 1
        return  a * 2
    }
    return name() + name() * name()
}
==== 26
contract myAFunc {
    func main() int {
        func sub() {
        }
    }
}
==== myAFunc 4:9: Function cannot be defined inside another function
contract myFunc {
    if true {
        int a
        func name() {
            a += 1
            a *= 2
        }
        name()
        name()
        return a
    }
}
==== 6
contract myFunc {
    name()
}
==== myFunc 2:10: Function name() hasn't been defined
contract myFunc {
    func name() {
    }
    func name() {
    }
}
==== myFunc 5:5: Function name has already been defined
contract myQuest {
    int i
    i += 1 + ?(i==0, 7+2, 2/0)
    i += 2 + ?(i<0, 2/0, 3)
    return i
}
==== 15
contract myQuest {
    return ?(true, 7+2, false)
}
==== myQuest 2:30: Different types of ?
contract myCycle {
    int i
    while i < 1000 {
        int j k
        j = i 
        k = i*2
        if k > i {
            int x = j
            j = x + 2
        }
        i += 1
    }
    return i
}
==== 1000
contract myORAND {
    bool b = 10 > 1 || 2/0 == 3
    if !b {
        return false
    }
    b = b && 1 > 5 && 6/0 == 7
    b = !b && true && 5==5
    return b
}
==== true
contract myIf {
    int ret = 1
    if ret == 1 {
        ret += 2
    }
    if ret < 3 {
        ret /= 2
    } else {
        ret += 5
    }
    if false {
        ret *=3
    } elif ret < 10 {
        ret *= 2
    }
    if ret < 10 {
        ret *=3
    } elif ret != 16 {
        ret *= 2
    } elif ret == 16 {
        ret += 4
    } elif ret >5 {
        ret/=3
    } elif ret == 5 {
        ret -= 20
    } else {
        ret *= 0
    }
    if ret < 10 {
        ret *=3
    } elif ret == 16 {
        ret *= 2
    } elif false {
        ret += 4
    } else {
        ret *= 2
    }
    return ret
} 
==== 40
contract myIf {
    int ret
    if true  {
    } elif ret {
    }
} 
==== myIf 4:12: Unexpected type int of expression; expecting bool
contract myIf {
    int ret
    if ret  {
    }
} 
==== myIf 3:8: Unexpected type int of expression; expecting bool
contract myFact {
    int f = 1
    int i = 1
    while i <= 16 {
        f *= i
        i+=1
    }
    return f
} 
==== 20922789888000
contract myWhile {
    int i sum
    while i < 5 {
        int j
        while j <= i {
            sum += j
            j+=2
        }
        i+=1
    }
    return sum
} 
==== 10
contract myVar {
    int myVar
    while false {
        int myVar
    }
} 
==== myVar 4:19: Variable myVar has already been defined
contract myGT {
    while 10 + 5 {
    }
} 
==== myGT 2:18: Unexpected type int of expression; expecting bool
contract myGT {
    while 10 {
    }
} 
==== myGT 2:11: Unexpected type int of expression; expecting bool
contract myGT {
    return 5 > 10
} 
==== false
contract myGE {
    return 6 >= 6
} 
==== true
contract myLT {
    return 5 < 10
} 
==== true
contract myLE {
    return 6 >= 6
} 
==== true
contract myNE2 {
    return 5 != 10
} 
==== true
contract myNE1 {
    return 8+2 != 10
} 
==== false
contract myEQ2 {
    return 5 == 10
} 
==== false
contract myEQ1 {
    int a = 10
    return a == 10
} 
==== true
contract myVarSetAB {
    int a
    a += true
} 
==== myVarSetAB 3:15: Operator int+=bool has not been found
contract myMod2 {
    int a = 21 % 0
} 
==== integer divide by zero
contract myMod {
    int a = 21
    a %= 2-2
} 
==== integer divide by zero
contract myVarAssign {
    int a = 7
    int b = a + 3
    a += 8
    b -= 5
    a *= b + 5
    b /=5
    a %= 17
    return a + b
} 
==== 15
contract myVarSetAB {
    int a = 10
    int b = 15
    b = b + 1
    return a + b + a % 3
} 
==== 27
contract myVarSet {
    int a
    a = 23
    return (a - 3)/4 + a
} 
==== 28
contract myVar {
    int a
    {
        return 20
    }
    return a
} 
==== 3:5: syntax error: unexpected LBRACE, expecting RBRACE
contract myVar {
    int a
    return (a + 3)*2
} 
==== 6
contract myNoVar {
    return 1 + b
} 
==== myNoVar 2:16: Variable b hasn't been defined
contract myVarE1 {
    int abc 
    int abc
} 
==== myVarE1 3:13: Variable abc has already been defined
contract myVarE {
    int abc abc
} 
==== myVarE 2:17: Variable abc has already been defined
contract myDIV {
    return 100/(15-0xf)
} 
==== integer divide by zero
contract myMULF {
    return 2*false
} 
==== myMULF 2:14: Operator int*bool has not been found
contract myMUL {
    return 0xFF - 2*(50-16) + (20+52)/3 + (20-5 + 7)*3/0x2 + 8/3
} 
==== 246
contract myAdd {
    return 0xFF + 1 + -100 - 56 - -1000
} 
==== 1100
contract myPush64 {
    return 0xFFFFFFFFFF
} 
==== 1099511627775
contract myPushn64 {
    return 0x10AbFc32
} 
==== 279706674
contract myPushn3212 {
    return -2147483648
} 
==== -2147483648
contract myPushn321 {
    return -1
} 
==== -1
contract myPushn32 {
    return 2147483647
} 
==== 2147483647
contract myPush32 {
    return (1000123)
} 
==== 1000123
contract myNOTTR {
    return !true
} 
==== false
contract myTR {
    return true
} 
==== true
contract myE {
    return -true
} 
==== myE 2:13: Operator -bool has not been found
contract myS {
    return -100
} 
==== -100
contract my777 {
    return 777
} 
==== 777
contract Empty {
    return
} 
==== 
contract my {
    return
} 
==== Contract my has already been defined
contract my {
    10
} 
==== 2:5: syntax error: unexpected INT, expecting RBRACE
contract my {
} 
==== 
contract my {
} 
contract myNext {
} 
==== 3:1: syntax error: unexpected CONTRACT, expecting NEWLINE
myvar contract {
} 
==== 1:1: syntax error: unexpected IDENT, expecting CONTRACT
contract {
} 
==== 1:10: syntax error: unexpected LBRACE, expecting IDENT
/* 
   ==== expecting result or error text
   ==== gas $ expecting result or error text
*/
==== 4:3: syntax error: unexpected $end, expecting CONTRACT
