// Code generated by goyacc -o parser.go -v y.output parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

// import "fmt"

//line parser.y:8
type yySymType struct {
	yys int
	b   bool
	i   int
	f   float64
	s   string
	a   []string
}

const IDENT = 57346
const INT = 57347
const FLOAT = 57348
const STRING = 57349
const TRUE = 57350
const FALSE = 57351
const ADD = 57352
const SUB = 57353
const MUL = 57354
const DIV = 57355
const MOD = 57356
const ASSIGN = 57357
const ADD_ASSIGN = 57358
const SUB_ASSIGN = 57359
const MUL_ASSIGN = 57360
const DIV_ASSIGN = 57361
const MOD_ASSIGN = 57362
const AND = 57363
const OR = 57364
const INC = 57365
const DEC = 57366
const EQ = 57367
const NOT_EQ = 57368
const NOT = 57369
const LT = 57370
const GT = 57371
const LTE = 57372
const GTE = 57373
const ELLIPSIS = 57374
const DOT = 57375
const COMMA = 57376
const COLON = 57377
const LPAREN = 57378
const RPAREN = 57379
const LBRACE = 57380
const RBRACE = 57381
const LBRAKET = 57382
const RBRAKET = 57383
const CONTRACT = 57384
const DATA = 57385
const CONDITION = 57386
const ACTION = 57387
const FUNC = 57388
const VAR = 57389
const EXTEND_VAR = 57390
const IF = 57391
const ELSE = 57392
const WHILE = 57393
const BREAK = 57394
const CONTINUE = 57395
const INFO = 57396
const WARNING = 57397
const ERROR = 57398
const NIL = 57399
const RETURN = 57400
const T_BOOL = 57401
const T_INT = 57402
const T_FLOAT = 57403
const T_MONEY = 57404
const T_STRING = 57405
const T_BYTES = 57406
const T_ARRAY = 57407
const T_MAP = 57408
const T_FILE = 57409
const LOWER_THAN_LPAREN = 57410
const LESS_THAN_ELSE = 57411

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"INT",
	"FLOAT",
	"STRING",
	"TRUE",
	"FALSE",
	"ADD",
	"SUB",
	"MUL",
	"DIV",
	"MOD",
	"ASSIGN",
	"ADD_ASSIGN",
	"SUB_ASSIGN",
	"MUL_ASSIGN",
	"DIV_ASSIGN",
	"MOD_ASSIGN",
	"AND",
	"OR",
	"INC",
	"DEC",
	"EQ",
	"NOT_EQ",
	"NOT",
	"LT",
	"GT",
	"LTE",
	"GTE",
	"ELLIPSIS",
	"DOT",
	"COMMA",
	"COLON",
	"LPAREN",
	"RPAREN",
	"LBRACE",
	"RBRACE",
	"LBRAKET",
	"RBRAKET",
	"CONTRACT",
	"DATA",
	"CONDITION",
	"ACTION",
	"FUNC",
	"VAR",
	"EXTEND_VAR",
	"IF",
	"ELSE",
	"WHILE",
	"BREAK",
	"CONTINUE",
	"INFO",
	"WARNING",
	"ERROR",
	"NIL",
	"RETURN",
	"T_BOOL",
	"T_INT",
	"T_FLOAT",
	"T_MONEY",
	"T_STRING",
	"T_BYTES",
	"T_ARRAY",
	"T_MAP",
	"T_FILE",
	"LOWER_THAN_LPAREN",
	"LESS_THAN_ELSE",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 282

var yyAct = [...]int{

	53, 44, 107, 48, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 124, 80, 15, 28, 77, 37,
	38, 39, 5, 6, 31, 86, 108, 5, 37, 38,
	39, 5, 127, 78, 63, 72, 108, 73, 62, 96,
	69, 70, 81, 17, 18, 19, 20, 21, 22, 23,
	24, 25, 126, 65, 66, 125, 29, 71, 88, 89,
	93, 122, 90, 91, 92, 13, 74, 42, 15, 85,
	87, 106, 86, 12, 86, 118, 5, 52, 101, 54,
	95, 55, 57, 56, 58, 59, 60, 109, 61, 26,
	111, 112, 110, 102, 115, 116, 63, 72, 3, 73,
	117, 93, 69, 70, 97, 99, 100, 119, 121, 84,
	120, 32, 36, 123, 45, 65, 66, 75, 128, 71,
	76, 104, 103, 29, 47, 9, 129, 130, 74, 36,
	15, 40, 8, 4, 2, 14, 7, 30, 5, 52,
	45, 54, 79, 55, 57, 56, 58, 59, 60, 35,
	61, 63, 72, 34, 73, 33, 105, 69, 70, 63,
	72, 51, 73, 82, 83, 69, 70, 50, 49, 10,
	65, 66, 11, 27, 71, 46, 43, 41, 65, 66,
	94, 86, 71, 74, 67, 15, 64, 113, 68, 1,
	0, 74, 0, 15, 0, 0, 54, 0, 55, 57,
	56, 58, 59, 60, 54, 61, 55, 57, 56, 58,
	59, 60, 0, 61, 63, 72, 0, 73, 0, 0,
	69, 70, 63, 72, 0, 73, 0, 0, 69, 70,
	0, 0, 0, 65, 66, 0, 0, 71, 0, 0,
	0, 65, 66, 0, 0, 71, 74, 114, 0, 98,
	72, 0, 73, 0, 74, 69, 70, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 65, 66,
	0, 0, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 74,
}
var yyPact = [...]int{

	-19, -19, -1000, -1000, -1000, 128, 121, -1000, 37, 27,
	-22, -54, 52, -15, -1000, 92, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 83, -16, -1000,
	-24, -1000, -1000, -1000, -1000, -1000, -1000, 4, -22, -22,
	-1000, 30, -1000, -1000, -1000, -1000, -1000, -1000, 40, -1000,
	-1000, -1000, 119, -1000, 218, 218, -1000, -1000, 218, 218,
	218, -1000, -1000, 65, -1, 245, 245, 245, -1000, -1000,
	-1000, -1000, -1000, -1000, 218, 118, -1000, 117, -1000, -1000,
	-1000, 32, -1000, -1000, -1000, -1000, 218, -16, 147, 147,
	40, 40, 40, 210, 218, -1000, 218, -1000, 24, -1000,
	-1000, 38, -16, 78, -1000, 22, -1000, -1000, -54, -1000,
	-1000, -36, -1000, 18, -1000, -1000, -1000, -9, -1000, -1000,
	-1000, -1000, -1000, 111, 155, -1000, 218, -1000, -1000, -1000,
	-1000,
}
var yyPgo = [...]int{

	0, 189, 188, 187, 3, 186, 0, 38, 184, 180,
	177, 67, 124, 176, 1, 4, 17, 175, 173, 172,
	169, 98, 168, 167, 161, 2, 156, 155, 153, 149,
	111, 137, 133, 134,
}
var yyR1 = [...]int{

	0, 2, 2, 2, 2, 2, 2, 5, 5, 3,
	3, 7, 7, 7, 7, 8, 8, 8, 6, 6,
	9, 4, 4, 10, 10, 12, 12, 11, 11, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 16, 16,
	17, 18, 18, 18, 19, 19, 20, 20, 21, 13,
	13, 14, 14, 14, 14, 14, 22, 22, 23, 24,
	24, 24, 24, 24, 24, 25, 25, 26, 26, 27,
	27, 28, 29, 30, 30, 30, 30, 31, 31, 32,
	32, 33, 33, 1, 1,
}
var yyR2 = [...]int{

	0, 4, 3, 1, 1, 1, 3, 1, 4, 1,
	3, 1, 2, 2, 2, 1, 1, 1, 1, 3,
	1, 1, 3, 1, 2, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 2, 4, 4, 2, 3, 2, 1, 4, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 3, 1,
	1, 2, 2, 2, 1, 3, 2, 1, 2, 4,
	3, 2, 2, 1, 1, 1, 1, 1, 2, 5,
	4, 1, 1, 1, 2,
}
var yyChk = [...]int{

	-1000, -1, -33, -21, -32, 46, 42, -33, 4, 4,
	-20, -19, 36, 38, -12, 38, -15, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 37, -18, -16, 4,
	-31, 39, -30, -27, -28, -29, -21, 43, 44, 45,
	39, -10, -11, -13, -14, -21, -17, -12, -4, -22,
	-23, -24, 47, -6, 49, 51, 53, 52, 54, 55,
	56, 58, -7, 4, -5, 23, 24, -8, -2, 10,
	11, 27, 5, 7, 36, 34, 37, 34, -15, -30,
	39, 38, -12, -12, -11, 39, 34, -16, -4, -4,
	-4, -4, -4, 36, -9, 15, 40, -7, 4, -7,
	-7, -4, -16, 4, 4, -26, 39, -25, 4, -6,
	-15, -14, -14, -3, 37, -6, -6, -4, 37, -15,
	32, -25, 39, -15, 50, 37, 34, 41, 7, -14,
	-6,
}
var yyDef = [...]int{

	0, -2, 83, 81, 82, 0, 0, 84, 0, 0,
	0, 47, 0, 0, 48, 0, 46, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 44, 0, 0, 38,
	0, 80, 77, 73, 74, 75, 76, 0, 0, 0,
	25, 0, 23, 27, 28, 49, 50, 51, 52, 53,
	54, 55, 0, 21, 0, 0, 59, 60, 0, 0,
	0, 64, 18, 3, 11, 0, 0, 0, 7, 15,
	16, 17, 4, 5, 0, 0, 45, 0, 41, 78,
	79, 0, 71, 72, 24, 26, 0, 0, 0, 0,
	61, 62, 63, 0, 0, 20, 0, 12, 3, 13,
	14, 0, 0, 38, 39, 0, 70, 67, 0, 22,
	40, 56, 58, 0, 2, 9, 19, 0, 6, 42,
	43, 68, 69, 66, 0, 1, 0, 8, 65, 57,
	10,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	}
	goto yystack /* stack new state and value */
}
