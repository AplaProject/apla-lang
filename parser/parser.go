// Code generated by goyacc -o parser.go -v y.output parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

func setResult(l yyLexer, v *Node) {
	l.(*lexer).result = v
}

//line parser.y:10
type yySymType struct {
	yys int
	n   *Node
	b   bool
	i   int64
	f   float64
	s   string
	sa  []string
	va  []NVar
}

const IDENT = 57346
const CALL = 57347
const CALLCONTRACT = 57348
const INDEX = 57349
const INT = 57350
const STRING = 57351
const QSTRING = 57352
const TRUE = 57353
const FALSE = 57354
const NEWLINE = 57355
const COMMA = 57356
const COLON = 57357
const LPAREN = 57358
const RPAREN = 57359
const LBRACE = 57360
const RBRACE = 57361
const LBRACKET = 57362
const RBRACKET = 57363
const QUESTION = 57364
const DOT = 57365
const ADD = 57366
const SUB = 57367
const MUL = 57368
const DIV = 57369
const MOD = 57370
const ADD_ASSIGN = 57371
const SUB_ASSIGN = 57372
const MUL_ASSIGN = 57373
const DIV_ASSIGN = 57374
const MOD_ASSIGN = 57375
const ASSIGN = 57376
const AND = 57377
const OR = 57378
const EQ = 57379
const NOT_EQ = 57380
const NOT = 57381
const LT = 57382
const GT = 57383
const LTE = 57384
const GTE = 57385
const DATA = 57386
const CONTRACT = 57387
const IF = 57388
const ELIF = 57389
const ELSE = 57390
const RETURN = 57391
const WHILE = 57392
const FUNC = 57393
const T_INT = 57394
const T_BOOL = 57395
const T_STR = 57396
const T_ARR = 57397
const T_MAP = 57398
const UNARYMINUS = 57399
const UNARYNOT = 57400

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"CALL",
	"CALLCONTRACT",
	"INDEX",
	"INT",
	"STRING",
	"QSTRING",
	"TRUE",
	"FALSE",
	"NEWLINE",
	"COMMA",
	"COLON",
	"LPAREN",
	"RPAREN",
	"LBRACE",
	"RBRACE",
	"LBRACKET",
	"RBRACKET",
	"QUESTION",
	"DOT",
	"ADD",
	"SUB",
	"MUL",
	"DIV",
	"MOD",
	"ADD_ASSIGN",
	"SUB_ASSIGN",
	"MUL_ASSIGN",
	"DIV_ASSIGN",
	"MOD_ASSIGN",
	"ASSIGN",
	"AND",
	"OR",
	"EQ",
	"NOT_EQ",
	"NOT",
	"LT",
	"GT",
	"LTE",
	"GTE",
	"DATA",
	"CONTRACT",
	"IF",
	"ELIF",
	"ELSE",
	"RETURN",
	"WHILE",
	"FUNC",
	"T_INT",
	"T_BOOL",
	"T_STR",
	"T_ARR",
	"T_MAP",
	"UNARYMINUS",
	"UNARYNOT",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 539

var yyAct = [...]int{

	63, 54, 103, 68, 44, 28, 27, 29, 30, 31,
	17, 155, 157, 16, 11, 24, 22, 23, 25, 45,
	59, 60, 64, 2, 13, 62, 66, 9, 26, 79,
	169, 42, 40, 40, 10, 70, 71, 72, 73, 74,
	75, 76, 77, 69, 161, 153, 41, 95, 35, 36,
	37, 38, 39, 34, 82, 83, 86, 18, 99, 100,
	19, 20, 21, 28, 27, 29, 30, 31, 142, 12,
	136, 78, 104, 135, 112, 5, 97, 98, 96, 113,
	115, 43, 149, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 116, 109, 42, 133,
	42, 28, 27, 29, 30, 31, 138, 61, 107, 137,
	140, 132, 1, 80, 105, 141, 134, 131, 16, 150,
	111, 33, 69, 84, 85, 82, 83, 86, 107, 105,
	32, 108, 106, 6, 3, 139, 16, 65, 4, 148,
	24, 22, 23, 25, 7, 152, 147, 104, 14, 13,
	154, 24, 22, 23, 25, 168, 160, 156, 151, 162,
	13, 16, 24, 22, 23, 25, 163, 16, 159, 16,
	15, 13, 8, 102, 67, 146, 165, 145, 0, 167,
	0, 0, 18, 0, 0, 19, 20, 21, 28, 27,
	29, 30, 31, 18, 0, 0, 19, 20, 21, 28,
	27, 29, 30, 31, 18, 0, 0, 19, 20, 21,
	28, 27, 29, 30, 31, 24, 22, 23, 25, 0,
	0, 0, 0, 0, 13, 0, 24, 22, 23, 25,
	143, 164, 0, 0, 0, 13, 0, 84, 85, 82,
	83, 86, 0, 0, 0, 0, 0, 0, 87, 88,
	89, 90, 0, 93, 94, 91, 92, 18, 0, 0,
	19, 20, 21, 28, 27, 29, 30, 31, 18, 0,
	0, 19, 20, 21, 28, 27, 29, 30, 31, 166,
	0, 0, 0, 0, 0, 0, 84, 85, 82, 83,
	86, 0, 0, 0, 0, 0, 158, 87, 88, 89,
	90, 0, 93, 94, 91, 92, 84, 85, 82, 83,
	86, 0, 0, 0, 0, 0, 144, 87, 88, 89,
	90, 0, 93, 94, 91, 92, 84, 85, 82, 83,
	86, 0, 0, 0, 0, 0, 0, 87, 88, 89,
	90, 130, 93, 94, 91, 92, 0, 0, 84, 85,
	82, 83, 86, 0, 0, 0, 0, 0, 0, 87,
	88, 89, 90, 0, 93, 94, 91, 92, 114, 0,
	0, 84, 85, 82, 83, 86, 0, 0, 0, 0,
	0, 0, 87, 88, 89, 90, 0, 93, 94, 91,
	92, 110, 0, 0, 84, 85, 82, 83, 86, 0,
	0, 0, 0, 0, 0, 87, 88, 89, 90, 101,
	93, 94, 91, 92, 0, 84, 85, 82, 83, 86,
	0, 0, 0, 0, 0, 0, 87, 88, 89, 90,
	81, 93, 94, 91, 92, 0, 84, 85, 82, 83,
	86, 0, 0, 0, 0, 0, 0, 87, 88, 89,
	90, 0, 93, 94, 91, 92, 84, 85, 82, 83,
	86, 0, 0, 0, 0, 0, 0, 87, 88, 89,
	90, 0, 93, 94, 91, 92, 84, 85, 82, 83,
	86, 0, 0, 84, 85, 82, 83, 86, 88, 89,
	90, 0, 93, 94, 91, 92, 89, 90, 0, 93,
	94, 91, 92, 55, 52, 53, 25, 47, 48, 49,
	50, 51, 0, 0, 0, 46, 0, 0, 0, 0,
	0, 56, 0, 0, 57, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 58,
}
var yyPact = [...]int{

	-22, 121, 134, -1000, 57, 120, -17, 15, -1000, 51,
	-1000, 222, 117, -1000, 108, 19, 12, 77, 499, 499,
	499, 102, 499, 133, -1000, 499, -1000, -1000, -1000, -1000,
	-1000, -1000, -47, -1000, 499, 499, 499, 499, 499, 499,
	499, 499, -47, -5, 109, 412, 499, -1000, -1000, -1000,
	-1000, -1000, 499, 133, 13, -1000, 61, 499, 499, 432,
	391, -47, 115, 432, 114, 82, 370, 107, -1000, 75,
	432, 432, 432, 432, 432, 432, 347, 432, -1000, 499,
	-1000, -1000, 499, 499, 499, 499, 499, 499, 499, 499,
	499, 499, 499, 499, 499, 324, 100, 94, 499, -1000,
	-1000, -1000, 56, -1000, 75, 499, -1000, 131, -1000, 499,
	-1000, 49, 109, -1000, -1000, 432, 211, -1000, -1000, 28,
	28, -1000, 452, 459, 99, 99, 99, 99, 99, 99,
	-1000, -1000, -1000, 302, 158, -47, -47, 109, 432, 67,
	432, -1000, 106, -1000, 499, -1000, 27, 8, -1000, 499,
	-1000, -36, 282, -1000, 432, 499, -1000, 26, 499, 147,
	213, -1000, 262, -1000, -1000, 136, -1000, 11, -1000, -1000,
}
var yyPgo = [...]int{

	0, 28, 10, 175, 4, 3, 174, 2, 173, 172,
	25, 170, 0, 158, 157, 148, 14, 22, 144, 112,
	1,
}
var yyR1 = [...]int{

	0, 1, 1, 1, 1, 1, 2, 2, 3, 3,
	16, 16, 16, 10, 10, 10, 17, 17, 17, 11,
	20, 20, 14, 14, 13, 13, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 4, 4,
	7, 8, 8, 8, 5, 6, 6, 9, 9, 18,
	19, 19,
}
var yyR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 3, 0, 1,
	0, 2, 3, 0, 1, 3, 0, 3, 5, 1,
	3, 4, 0, 4, 0, 6, 3, 3, 3, 3,
	3, 3, 3, 4, 2, 7, 1, 2, 5, 8,
	3, 3, 3, 1, 1, 1, 1, 1, 3, 3,
	1, 1, 8, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 1, 2,
	2, 0, 1, 3, 2, 1, 3, 0, 7, 2,
	6, 2,
}
var yyChk = [...]int{

	-1000, -19, 45, 13, 4, 18, 13, -18, -9, 44,
	19, -16, 18, 13, -15, -11, -20, -2, 46, 49,
	50, 51, 5, 6, 4, 7, -1, 53, 52, 54,
	55, 56, 13, 13, 34, 29, 30, 31, 32, 33,
	20, 34, 23, 4, -4, -12, 16, 8, 9, 10,
	11, 12, 5, 6, -20, 4, 22, 25, 39, -12,
	-12, 5, -10, -12, -17, 4, -12, -6, -5, -2,
	-12, -12, -12, -12, -12, -12, -12, -12, -1, 34,
	4, 18, 26, 27, 24, 25, 28, 35, 36, 37,
	38, 42, 43, 40, 41, -12, -10, -17, 16, -12,
	-12, 18, -8, -7, -2, 14, 17, 14, 17, 15,
	21, 13, -4, 4, 21, -12, -16, -12, -12, -12,
	-12, -12, -12, -12, -12, -12, -12, -12, -12, -12,
	17, 17, 17, -12, -16, 17, 14, -4, -12, 4,
	-12, -5, 19, 19, 14, 19, -3, -2, -7, 15,
	13, -13, -12, 18, -12, 47, -14, 48, 14, -16,
	-12, 18, -12, 19, 18, -16, 17, -16, 19, 19,
}
var yyDef = [...]int{

	0, -2, 0, 81, 0, 0, 77, 0, 10, 0,
	80, 79, 0, 11, 0, 0, 0, 0, 0, 36,
	0, 0, 13, 16, 19, 0, 6, 1, 2, 3,
	4, 5, 0, 12, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 68, 34, 0, 0, 43, 44, 45,
	46, 47, 13, 16, 50, 51, 0, 0, 0, 37,
	0, 71, 0, 14, 0, 0, 0, 0, 75, 0,
	26, 27, 28, 29, 30, 31, 0, 32, 7, 0,
	69, 10, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 66,
	67, 10, 0, 72, 0, 0, 40, 0, 41, 0,
	20, 0, 74, 68, 21, 33, 0, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	42, 48, 49, 0, 0, 8, 0, 70, 15, 0,
	17, 76, 0, 24, 0, 38, 0, 9, 73, 0,
	78, 22, 0, 10, 18, 0, 35, 0, 0, 0,
	0, 10, 0, 39, 10, 0, 52, 0, 23, 25,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:121
		{
			yyVAL.i = VBool
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:122
		{
			yyVAL.i = VInt
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:123
		{
			yyVAL.i = VStr
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:124
		{
			yyVAL.i = VArr
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:125
		{
			yyVAL.i = VMap
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:129
		{
			yyVAL.n = newType(yyDollar[1].i, yylex)
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:130
		{
			yyVAL.n = addSubtype(yyDollar[1].n, yyDollar[3].i, yylex)
		}
	case 8:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:134
		{
			yyVAL.n = nil
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:135
		{
			yyVAL.n = yyDollar[1].n
		}
	case 10:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:139
		{
			yyVAL.n = nil
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:140
		{
			yyVAL.n = yyDollar[1].n
		}
	case 12:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:141
		{
			yyVAL.n = addStatement(yyDollar[1].n, yyDollar[2].n, yylex)
		}
	case 13:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:145
		{
			yyVAL.n = nil
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:146
		{
			yyVAL.n = newParam(yyDollar[1].n, yylex)
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:147
		{
			yyVAL.n = addParam(yyDollar[1].n, yyDollar[3].n)
		}
	case 16:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:151
		{
			yyVAL.n = nil
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:152
		{
			yyVAL.n = newContractParam(yyDollar[1].s, yyDollar[3].n, yylex)
		}
	case 18:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:153
		{
			yyVAL.n = addContractParam(yyDollar[1].n, yyDollar[3].s, yyDollar[5].n)
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:157
		{
			yyVAL.n = newVarValue(yyDollar[1].s, yylex)
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:160
		{
			yyVAL.n = newIndex(yyDollar[1].s, yyDollar[2].n, yylex)
		}
	case 21:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:161
		{
			yyVAL.n = addIndex(yyDollar[1].n, yyDollar[3].n, yylex)
		}
	case 22:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:164
		{
			yyVAL.n = nil
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:165
		{
			yyVAL.n = yyDollar[3].n
		}
	case 24:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:169
		{
			yyVAL.n = nil
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:170
		{
			yyVAL.n = newElif(yyDollar[1].n, yyDollar[3].n, yyDollar[5].n, yylex)
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:174
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, ASSIGN, yylex)
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:175
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, ADD_ASSIGN, yylex)
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:176
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, SUB_ASSIGN, yylex)
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:177
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, MUL_ASSIGN, yylex)
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:178
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, DIV_ASSIGN, yylex)
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:179
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, MOD_ASSIGN, yylex)
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:180
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, ASSIGN, yylex)
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:181
		{
			yyVAL.n = newBinary(newVarDecl(yyDollar[1].n, []string{yyDollar[2].s}, yylex), yyDollar[4].n, ASSIGN, yylex)
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:182
		{
			yyVAL.n = newVarDecl(yyDollar[1].n, yyDollar[2].sa, yylex)
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:183
		{
			yyVAL.n = newIf(yyDollar[2].n, yyDollar[4].n, yyDollar[6].n, yyDollar[7].n, yylex)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:184
		{
			yyVAL.n = newReturn(nil, yylex)
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:185
		{
			yyVAL.n = newReturn(yyDollar[2].n, yylex)
		}
	case 38:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:186
		{
			yyVAL.n = newWhile(yyDollar[2].n, yyDollar[4].n, yylex)
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:187
		{
			yyVAL.n = newFunc(yyDollar[2].s, yyDollar[3].va, yyDollar[5].n, yyDollar[7].n, yylex)
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:190
		{
			yyVAL.n = newCallFunc(yyDollar[1].s, yyDollar[2].n, yylex)
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:191
		{
			yyVAL.n = newCallContract(yyDollar[1].s, yyDollar[2].n, yylex)
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:195
		{
			yyVAL.n = yyDollar[2].n
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:196
		{
			yyVAL.n = newValue(yyDollar[1].i, yylex)
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:197
		{
			yyVAL.n = newValue(yyDollar[1].s, yylex)
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:198
		{
			yyVAL.n = newValue(yyDollar[1].s, yylex)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:199
		{
			yyVAL.n = newValue(true, yylex)
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:200
		{
			yyVAL.n = newValue(false, yylex)
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:201
		{
			yyVAL.n = newCallFunc(yyDollar[1].s, yyDollar[2].n, yylex)
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:202
		{
			yyVAL.n = newCallContract(yyDollar[1].s, yyDollar[2].n, yylex)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:203
		{
			yyVAL.n = yyDollar[1].n
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:204
		{
			yyVAL.n = newGetVar(yyDollar[1].s, yylex)
		}
	case 52:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:205
		{
			yyVAL.n = newQuestion(yyDollar[3].n, yyDollar[5].n, yyDollar[7].n, yylex)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:206
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, MUL, yylex)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:207
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, DIV, yylex)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:208
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, ADD, yylex)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:209
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, SUB, yylex)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:210
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, MOD, yylex)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:211
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, AND, yylex)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:212
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, OR, yylex)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:213
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, EQ, yylex)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:214
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, NOT_EQ, yylex)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:215
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, LTE, yylex)
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:216
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, GTE, yylex)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:217
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, LT, yylex)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:218
		{
			yyVAL.n = newBinary(yyDollar[1].n, yyDollar[3].n, GT, yylex)
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:220
		{
			yyVAL.n = newUnary(yyDollar[2].n, SUB, yylex)
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:221
		{
			yyVAL.n = newUnary(yyDollar[2].n, NOT, yylex)
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:225
		{
			yyVAL.sa = []string{yyDollar[1].s}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:226
		{
			yyVAL.sa = append(yyDollar[1].sa, yyDollar[2].s)
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:230
		{
			yyVAL.va = newVars(yyDollar[1].n, yyDollar[2].sa)
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:234
		{
			yyVAL.va = nil
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:235
		{
			yyVAL.va = yyDollar[1].va
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:236
		{
			yyVAL.va = append(yyDollar[1].va, yyDollar[3].va...)
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:240
		{
			yyVAL.va = newVars(yyDollar[1].n, yyDollar[2].sa)
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:244
		{
			yyVAL.va = yyDollar[1].va
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:245
		{
			yyVAL.va = append(yyDollar[1].va, yyDollar[3].va...)
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:249
		{
			yyVAL.va = nil
		}
	case 78:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:250
		{
			yyVAL.va = yyDollar[4].va
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:254
		{
			yyVAL.n = newBlock(yyDollar[1].va, yyDollar[2].n, yylex)
		}
	case 80:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:260
		{
			yyVAL.n = newContract(yyDollar[2].s, yyDollar[5].n, yylex)
			setResult(yylex, yyVAL.n)
		}
	}
	goto yystack /* stack new state and value */
}
